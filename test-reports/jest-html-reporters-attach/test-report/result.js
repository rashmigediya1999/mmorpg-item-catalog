window.jest_html_reporters_callback__({"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":8,"numPassedTests":82,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":8,"numTotalTests":82,"startTime":1745216103712,"success":false,"testResults":[{"numFailingTests":0,"numPassingTests":6,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1745216105102,"runtime":1082,"slow":false,"start":1745216104020},"testFilePath":"/app/tests/unit/services/auth.service.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Auth Service","register"],"duration":14,"failureMessages":[],"fullName":"Auth Service register should register a new user and return user with token","status":"passed","title":"should register a new user and return user with token"},{"ancestorTitles":["Auth Service","register"],"duration":18,"failureMessages":[],"fullName":"Auth Service register should throw error if username already exists","status":"passed","title":"should throw error if username already exists"},{"ancestorTitles":["Auth Service","register"],"duration":2,"failureMessages":[],"fullName":"Auth Service register should throw error if email already exists","status":"passed","title":"should throw error if email already exists"},{"ancestorTitles":["Auth Service","login"],"duration":2,"failureMessages":[],"fullName":"Auth Service login should login user and return user with token","status":"passed","title":"should login user and return user with token"},{"ancestorTitles":["Auth Service","login"],"duration":2,"failureMessages":[],"fullName":"Auth Service login should throw error if user not found","status":"passed","title":"should throw error if user not found"},{"ancestorTitles":["Auth Service","login"],"duration":0,"failureMessages":[],"fullName":"Auth Service login should throw error if password is invalid","status":"passed","title":"should throw error if password is invalid"}]},{"numFailingTests":0,"numPassingTests":17,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1745216105823,"runtime":693,"slow":false,"start":1745216105130},"testFilePath":"/app/tests/unit/controllers/item.controller.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Item Controller","findAll"],"duration":26,"failureMessages":[],"fullName":"Item Controller findAll should return items with pagination","status":"passed","title":"should return items with pagination"},{"ancestorTitles":["Item Controller","findAll"],"duration":5,"failureMessages":[],"fullName":"Item Controller findAll should apply filters from query parameters","status":"passed","title":"should apply filters from query parameters"},{"ancestorTitles":["Item Controller","findAll"],"duration":6,"failureMessages":[],"fullName":"Item Controller findAll should handle errors","status":"passed","title":"should handle errors"},{"ancestorTitles":["Item Controller","findOne"],"duration":4,"failureMessages":[],"fullName":"Item Controller findOne should return item by id","status":"passed","title":"should return item by id"},{"ancestorTitles":["Item Controller","findOne"],"duration":6,"failureMessages":[],"fullName":"Item Controller findOne should return 404 if item not found","status":"passed","title":"should return 404 if item not found"},{"ancestorTitles":["Item Controller","findOne"],"duration":3,"failureMessages":[],"fullName":"Item Controller findOne should handle errors","status":"passed","title":"should handle errors"},{"ancestorTitles":["Item Controller","create"],"duration":6,"failureMessages":[],"fullName":"Item Controller create should create and return new item","status":"passed","title":"should create and return new item"},{"ancestorTitles":["Item Controller","create"],"duration":3,"failureMessages":[],"fullName":"Item Controller create should handle errors","status":"passed","title":"should handle errors"},{"ancestorTitles":["Item Controller","update"],"duration":5,"failureMessages":[],"fullName":"Item Controller update should update and return item","status":"passed","title":"should update and return item"},{"ancestorTitles":["Item Controller","update"],"duration":5,"failureMessages":[],"fullName":"Item Controller update should return 404 if item not found","status":"passed","title":"should return 404 if item not found"},{"ancestorTitles":["Item Controller","update"],"duration":2,"failureMessages":[],"fullName":"Item Controller update should handle errors","status":"passed","title":"should handle errors"},{"ancestorTitles":["Item Controller","delete"],"duration":2,"failureMessages":[],"fullName":"Item Controller delete should delete item and return no content","status":"passed","title":"should delete item and return no content"},{"ancestorTitles":["Item Controller","delete"],"duration":3,"failureMessages":[],"fullName":"Item Controller delete should return 404 if item not found","status":"passed","title":"should return 404 if item not found"},{"ancestorTitles":["Item Controller","delete"],"duration":1,"failureMessages":[],"fullName":"Item Controller delete should handle errors","status":"passed","title":"should handle errors"},{"ancestorTitles":["Item Controller","search"],"duration":12,"failureMessages":[],"fullName":"Item Controller search should search items and return results with pagination","status":"passed","title":"should search items and return results with pagination"},{"ancestorTitles":["Item Controller","search"],"duration":7,"failureMessages":[],"fullName":"Item Controller search should return 400 if query is missing","status":"passed","title":"should return 400 if query is missing"},{"ancestorTitles":["Item Controller","search"],"duration":2,"failureMessages":[],"fullName":"Item Controller search should handle errors","status":"passed","title":"should handle errors"}]},{"numFailingTests":0,"numPassingTests":17,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1745216106417,"runtime":577,"slow":false,"start":1745216105840},"testFilePath":"/app/tests/unit/controllers/category.controller.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Category Controller","findAll"],"duration":12,"failureMessages":[],"fullName":"Category Controller findAll should return all categories","status":"passed","title":"should return all categories"},{"ancestorTitles":["Category Controller","findAll"],"duration":5,"failureMessages":[],"fullName":"Category Controller findAll should return only root categories when rootOnly is true","status":"passed","title":"should return only root categories when rootOnly is true"},{"ancestorTitles":["Category Controller","findAll"],"duration":4,"failureMessages":[],"fullName":"Category Controller findAll should handle errors","status":"passed","title":"should handle errors"},{"ancestorTitles":["Category Controller","findOne"],"duration":9,"failureMessages":[],"fullName":"Category Controller findOne should return category by id","status":"passed","title":"should return category by id"},{"ancestorTitles":["Category Controller","findOne"],"duration":7,"failureMessages":[],"fullName":"Category Controller findOne should return 404 if category not found","status":"passed","title":"should return 404 if category not found"},{"ancestorTitles":["Category Controller","findOne"],"duration":2,"failureMessages":[],"fullName":"Category Controller findOne should handle errors","status":"passed","title":"should handle errors"},{"ancestorTitles":["Category Controller","create"],"duration":3,"failureMessages":[],"fullName":"Category Controller create should create and return new category","status":"passed","title":"should create and return new category"},{"ancestorTitles":["Category Controller","create"],"duration":2,"failureMessages":[],"fullName":"Category Controller create should handle errors","status":"passed","title":"should handle errors"},{"ancestorTitles":["Category Controller","update"],"duration":3,"failureMessages":[],"fullName":"Category Controller update should update and return category","status":"passed","title":"should update and return category"},{"ancestorTitles":["Category Controller","update"],"duration":8,"failureMessages":[],"fullName":"Category Controller update should return 404 if category not found","status":"passed","title":"should return 404 if category not found"},{"ancestorTitles":["Category Controller","update"],"duration":2,"failureMessages":[],"fullName":"Category Controller update should handle errors","status":"passed","title":"should handle errors"},{"ancestorTitles":["Category Controller","delete"],"duration":2,"failureMessages":[],"fullName":"Category Controller delete should delete category and return no content","status":"passed","title":"should delete category and return no content"},{"ancestorTitles":["Category Controller","delete"],"duration":3,"failureMessages":[],"fullName":"Category Controller delete should return 404 if category not found","status":"passed","title":"should return 404 if category not found"},{"ancestorTitles":["Category Controller","delete"],"duration":16,"failureMessages":[],"fullName":"Category Controller delete should handle errors","status":"passed","title":"should handle errors"},{"ancestorTitles":["Category Controller","getItems"],"duration":2,"failureMessages":[],"fullName":"Category Controller getItems should return items for a category","status":"passed","title":"should return items for a category"},{"ancestorTitles":["Category Controller","getItems"],"duration":1,"failureMessages":[],"fullName":"Category Controller getItems should return 404 if category not found","status":"passed","title":"should return 404 if category not found"},{"ancestorTitles":["Category Controller","getItems"],"duration":1,"failureMessages":[],"fullName":"Category Controller getItems should handle errors","status":"passed","title":"should handle errors"}]},{"numFailingTests":0,"numPassingTests":11,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1745216107063,"runtime":626,"slow":false,"start":1745216106437},"testFilePath":"/app/tests/unit/services/category.service.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Category Service","findAll"],"duration":6,"failureMessages":[],"fullName":"Category Service findAll should return all categories when rootOnly is false","status":"passed","title":"should return all categories when rootOnly is false"},{"ancestorTitles":["Category Service","findAll"],"duration":8,"failureMessages":[],"fullName":"Category Service findAll should return root categories with subcategories when rootOnly is true","status":"passed","title":"should return root categories with subcategories when rootOnly is true"},{"ancestorTitles":["Category Service","findById"],"duration":3,"failureMessages":[],"fullName":"Category Service findById should return category by id with subcategories","status":"passed","title":"should return category by id with subcategories"},{"ancestorTitles":["Category Service","findById"],"duration":3,"failureMessages":[],"fullName":"Category Service findById should return null if category not found","status":"passed","title":"should return null if category not found"},{"ancestorTitles":["Category Service","create"],"duration":3,"failureMessages":[],"fullName":"Category Service create should create and return new category","status":"passed","title":"should create and return new category"},{"ancestorTitles":["Category Service","update"],"duration":3,"failureMessages":[],"fullName":"Category Service update should update and return category","status":"passed","title":"should update and return category"},{"ancestorTitles":["Category Service","update"],"duration":21,"failureMessages":[],"fullName":"Category Service update should throw error if category is set as its own parent","status":"passed","title":"should throw error if category is set as its own parent"},{"ancestorTitles":["Category Service","update"],"duration":2,"failureMessages":[],"fullName":"Category Service update should return null if category not found","status":"passed","title":"should return null if category not found"},{"ancestorTitles":["Category Service","delete"],"duration":2,"failureMessages":[],"fullName":"Category Service delete should delete category and return true","status":"passed","title":"should delete category and return true"},{"ancestorTitles":["Category Service","delete"],"duration":1,"failureMessages":[],"fullName":"Category Service delete should return false if category not found","status":"passed","title":"should return false if category not found"},{"ancestorTitles":["Category Service","getItems"],"duration":3,"failureMessages":[],"fullName":"Category Service getItems should return items and count for a category","status":"passed","title":"should return items and count for a category"}]},{"numFailingTests":0,"numPassingTests":8,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1745216107619,"runtime":528,"slow":false,"start":1745216107091},"testFilePath":"/app/tests/unit/services/inventory.service.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Inventory Service","getUserInventory"],"duration":13,"failureMessages":[],"fullName":"Inventory Service getUserInventory should return user inventory items and count","status":"passed","title":"should return user inventory items and count"},{"ancestorTitles":["Inventory Service","addItemToUserInventory"],"duration":4,"failureMessages":[],"fullName":"Inventory Service addItemToUserInventory should add item to user inventory","status":"passed","title":"should add item to user inventory"},{"ancestorTitles":["Inventory Service","addItemToUserInventory"],"duration":21,"failureMessages":[],"fullName":"Inventory Service addItemToUserInventory should throw error if item not found","status":"passed","title":"should throw error if item not found"},{"ancestorTitles":["Inventory Service","updateItemQuantity"],"duration":6,"failureMessages":[],"fullName":"Inventory Service updateItemQuantity should update item quantity in inventory","status":"passed","title":"should update item quantity in inventory"},{"ancestorTitles":["Inventory Service","updateItemQuantity"],"duration":1,"failureMessages":[],"fullName":"Inventory Service updateItemQuantity should remove item if quantity is 0","status":"passed","title":"should remove item if quantity is 0"},{"ancestorTitles":["Inventory Service","updateItemQuantity"],"duration":1,"failureMessages":[],"fullName":"Inventory Service updateItemQuantity should throw error if item not found","status":"passed","title":"should throw error if item not found"},{"ancestorTitles":["Inventory Service","removeItemFromInventory"],"duration":2,"failureMessages":[],"fullName":"Inventory Service removeItemFromInventory should remove item from inventory","status":"passed","title":"should remove item from inventory"},{"ancestorTitles":["Inventory Service","removeItemFromInventory"],"duration":1,"failureMessages":[],"fullName":"Inventory Service removeItemFromInventory should return false if item not in inventory","status":"passed","title":"should return false if item not in inventory"}]},{"numFailingTests":0,"numPassingTests":13,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1745216108252,"runtime":616,"slow":false,"start":1745216107636},"testFilePath":"/app/tests/unit/services/item.service.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Item Service","findAll"],"duration":19,"failureMessages":[],"fullName":"Item Service findAll should return items and count","status":"passed","title":"should return items and count"},{"ancestorTitles":["Item Service","findAll"],"duration":4,"failureMessages":[],"fullName":"Item Service findAll should apply filters correctly","status":"passed","title":"should apply filters correctly"},{"ancestorTitles":["Item Service","findById"],"duration":6,"failureMessages":[],"fullName":"Item Service findById should return item by id","status":"passed","title":"should return item by id"},{"ancestorTitles":["Item Service","findById"],"duration":2,"failureMessages":[],"fullName":"Item Service findById should return null if item not found","status":"passed","title":"should return null if item not found"},{"ancestorTitles":["Item Service","create"],"duration":2,"failureMessages":[],"fullName":"Item Service create should create and return new item","status":"passed","title":"should create and return new item"},{"ancestorTitles":["Item Service","update"],"duration":2,"failureMessages":[],"fullName":"Item Service update should update and return item","status":"passed","title":"should update and return item"},{"ancestorTitles":["Item Service","update"],"duration":1,"failureMessages":[],"fullName":"Item Service update should return null if item not found","status":"passed","title":"should return null if item not found"},{"ancestorTitles":["Item Service","delete"],"duration":7,"failureMessages":[],"fullName":"Item Service delete should delete item and return true","status":"passed","title":"should delete item and return true"},{"ancestorTitles":["Item Service","delete"],"duration":2,"failureMessages":[],"fullName":"Item Service delete should return false if item not found","status":"passed","title":"should return false if item not found"},{"ancestorTitles":["Item Service","findByCategory"],"duration":2,"failureMessages":[],"fullName":"Item Service findByCategory should return items by category ID","status":"passed","title":"should return items by category ID"},{"ancestorTitles":["Item Service","findByRarity"],"duration":1,"failureMessages":[],"fullName":"Item Service findByRarity should return items by rarity ID","status":"passed","title":"should return items by rarity ID"},{"ancestorTitles":["Item Service","search"],"duration":7,"failureMessages":[],"fullName":"Item Service search should search items by query","status":"passed","title":"should search items by query"},{"ancestorTitles":["Item Service","search"],"duration":5,"failureMessages":[],"fullName":"Item Service search should apply pagination options when searching","status":"passed","title":"should apply pagination options when searching"}]},{"numFailingTests":0,"numPassingTests":9,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1745216108862,"runtime":585,"slow":false,"start":1745216108277},"testFilePath":"/app/tests/unit/middleware/auth.middleware.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Auth Middleware","authenticate"],"duration":18,"failureMessages":[],"fullName":"Auth Middleware authenticate should call next() when authentication is successful","status":"passed","title":"should call next() when authentication is successful"},{"ancestorTitles":["Auth Middleware","authenticate"],"duration":9,"failureMessages":[],"fullName":"Auth Middleware authenticate should return 401 when no authorization header is provided","status":"passed","title":"should return 401 when no authorization header is provided"},{"ancestorTitles":["Auth Middleware","authenticate"],"duration":2,"failureMessages":[],"fullName":"Auth Middleware authenticate should return 401 when authorization header format is invalid","status":"passed","title":"should return 401 when authorization header format is invalid"},{"ancestorTitles":["Auth Middleware","authenticate"],"duration":3,"failureMessages":[],"fullName":"Auth Middleware authenticate should return 401 when token is invalid","status":"passed","title":"should return 401 when token is invalid"},{"ancestorTitles":["Auth Middleware","authenticate"],"duration":8,"failureMessages":[],"fullName":"Auth Middleware authenticate should return 401 when user is not found","status":"passed","title":"should return 401 when user is not found"},{"ancestorTitles":["Auth Middleware","authorize"],"duration":1,"failureMessages":[],"fullName":"Auth Middleware authorize should call next() when user has required role","status":"passed","title":"should call next() when user has required role"},{"ancestorTitles":["Auth Middleware","authorize"],"duration":2,"failureMessages":[],"fullName":"Auth Middleware authorize should return 401 when no user is attached to request","status":"passed","title":"should return 401 when no user is attached to request"},{"ancestorTitles":["Auth Middleware","authorize"],"duration":2,"failureMessages":[],"fullName":"Auth Middleware authorize should return 403 when user does not have required role","status":"passed","title":"should return 403 when user does not have required role"},{"ancestorTitles":["Auth Middleware","authorize"],"duration":1,"failureMessages":[],"fullName":"Auth Middleware authorize should call next() when no specific roles are required","status":"passed","title":"should call next() when no specific roles are required"}]},{"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1745216110566,"runtime":1671,"slow":false,"start":1745216108895},"testFilePath":"/app/tests/integration/api/categories.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Categories API Integration Tests","GET /api/categories"],"duration":131,"failureMessages":[],"fullName":"Categories API Integration Tests GET /api/categories should return all categories","status":"passed","title":"should return all categories"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":[],"coverageDirectory":"/app/coverage","coverageProvider":"v8","coverageReporters":["json","text","lcov","clover"],"coverageThreshold":{"global":{"branches":80,"functions":80,"lines":80,"statements":80}},"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":1,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["/app/node_modules/jest-html-reporters/index.js",{"publicPath":"./test-reports","filename":"test-report.html","pageTitle":"Game Catalog API Test Report","expand":true,"openReport":true,"includeFailureMsg":true,"includeConsoleLog":true}]],"rootDir":"/app","runTestsByPath":false,"seed":-1894943300,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"","testSequencer":"/app/node_modules/@jest/test-sequencer/build/index.js","testTimeout":30000,"updateSnapshot":"new","useStderr":false,"verbose":true,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1745216110580,"_reporterOptions":{"publicPath":"./test-reports","filename":"test-report.html","expand":true,"pageTitle":"Game Catalog API Test Report","hideIcon":false,"testCommand":"","openReport":true,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":true,"stripSkippedTest":false,"includeFailureMsg":true},"logInfoMapping":{},"attachInfos":{}})